
import os
import csv
import requests
from io import StringIO
from fpdf import FPDF
import fitz
from docx import Document
from docx.shared import Pt
from docx.oxml import OxmlElement
from docx.oxml.ns import qn
from docx.shared import Inches
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT

def convert_to_csv(response):
    rows = [row.split(',') for row in response.split('\n')]
    csv_data = StringIO()
    csv_writer = csv.writer(csv_data)
    csv_writer.writerows(rows)
    csv_content = csv_data.getvalue()
    return csv_content

def decode_pdf(file_path):
    with fitz.open(file_path) as pdf_document:
        pdf_text = ''
        for page_num in range(pdf_document.page_count):
            page = pdf_document[page_num]
            pdf_text += page.get_text()
        return pdf_text

def decode_docx(file_path):
    doc = Document(file_path)
    doc_text = ''
    for paragraph in doc.paragraphs:
        doc_text += paragraph.text + '\n'
    return doc_text

def decode_default(file_path):
    with open(file_path, "rb") as file_content:
        return file_content.read().decode('utf-8', 'ignore')

def convert_to_csv(response):
    rows = [row.split(',') for row in response.split('\n')]
    csv_data = StringIO()
    csv_writer = csv.writer(csv_data)
    csv_writer.writerows(rows)
    return csv_data.getvalue()

def generate_csv(response, csv_filename):
    csv_content = convert_to_csv(response)
    with open(csv_filename, mode="w", newline="", encoding="utf-8") as csv_file:
        csv_file.write(csv_content)

class PDF(FPDF):
    def footer(self):
        self.set_y(-15)
        
        self.image('https://iili.io/dVPF2Kg.th.png', x=70, y=282, w=10)
        self.set_font("Arial", size=10)
        
        self.set_text_color(0, 0, 255)
        self.cell(0, 10, 'Content Generated by Aditya', ln=0, align='C', link="https://rb.gy/qws0y9")

def generate_pdf(messages, pdf_filename):
    pdf = PDF()
    pdf.add_page()
    pdf.set_font("Arial", style="B")

    for msg in messages[1:]:
        if msg['role'] == 'system':
            continue
        cell_width = 190 if len(msg['content']) > 100 else 200
        pdf.set_font("Arial", size=12)

        if msg['role'] == 'user':
            pdf.set_font("Arial", style="B", size=15)
        elif msg['role'] == 'assistant':
            pdf.set_font("Arial", style="", size=14)

        pdf.multi_cell(cell_width, 10, txt=f"{msg['role'].capitalize()}: {msg['content']}", align='L')

    pdf.output(pdf_filename)

def add_hyperlink(paragraph, url, text):
    part = paragraph.part
    r_id = part.relate_to(url, qn('http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink'), is_external=True)

    hyperlink = OxmlElement('w:hyperlink')
    hyperlink.set(qn('r:id'), r_id)

    new_run = OxmlElement('w:r')
    rPr = OxmlElement('w:rPr')
    u = OxmlElement('w:u')
    u.set(qn('w:val'), 'single')
    rPr.append(u)

    new_run.text = text
    new_run.append(rPr)
    hyperlink.append(new_run)

    paragraph._element.append(hyperlink)
    return paragraph

def download_image(image_url, filename):
    response = requests.get(image_url)
    if response.status_code == 200:
        with open(filename, 'wb') as f:
            f.write(response.content)
    return filename

def add_hyperlink(paragraph, url, text):
    part = paragraph.part
    r_id = part.relate_to(url, 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink', is_external=True)

    hyperlink = OxmlElement('w:hyperlink')
    
    hyperlink.set(qn('r:id'), r_id)

    new_run = OxmlElement('w:r')
    rPr = OxmlElement('w:rPr')
    
    u = OxmlElement('w:u')
    u.set(qn('w:val'), 'single')
    rPr.append(u)

    new_run.append(rPr)
    new_run.text = text
    hyperlink.append(new_run)

    paragraph._element.append(hyperlink)
    return paragraph


def generate_docx(messages, docx_filename):
    document = Document()

    for msg in messages[1:]:
        if msg['role'] == 'system':
            continue
        sanitized_content = ''.join(char if 31 < ord(char) < 127 else ' ' for char in msg['content'])

        paragraph = document.add_paragraph()
        run = paragraph.add_run(f"{msg['role'].capitalize()}: {sanitized_content}")

        if msg['role'] == 'assistant':
            run.font.size = Pt(12)
        elif msg['role'] == 'user':
            run.font.size = Pt(14)
            run.bold = True
        else:
            run.font.size = Pt(14)

        paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.LEFT

    section = document.sections[-1]
    footer = section.footer
    footer_paragraph = footer.paragraphs[0]

    image_path = download_image('https://iili.io/dVPF2Kg.th.png', 'logo.png')
    footer_paragraph.add_run().add_picture(image_path, width=Inches(0.5))

    footer_paragraph.add_run(' ')
    add_hyperlink(footer_paragraph, "https://rb.gy/qws0y9", "Content Generated by Aditya")

    document.save(docx_filename)

    if os.path.exists(image_path):
        os.remove(image_path)